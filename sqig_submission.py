# -*- coding: utf-8 -*-
"""SQIG_submission.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Co7I8Cx62De2O1U5SfsceJNs0nW_m2vy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('etf_data.csv', parse_dates=True, index_col=0)
print(df.head())

# Calculate daily returns
returns = df.pct_change().dropna()
print(returns.head())

# calculate ratios
sharpe_ratios = {}
sortino_ratios = {}

for etf in returns.columns:
    daily_returns = returns[etf]

    # Sharpe Ratio
    sharpe = np.mean(daily_returns) / np.std(daily_returns) * np.sqrt(252)
    sharpe_ratios[etf] = sharpe

    # Sortino Ratio
    downside_returns = daily_returns[daily_returns < 0]  # Only bad days
    downside_std = downside_returns.std()
    if downside_std != 0:
        sortino = np.mean(daily_returns) / downside_std * np.sqrt(252)
    else:
        sortino = 0
    sortino_ratios[etf] = sortino

print("Sharpe Ratios:", sharpe_ratios)
print("Sortino Ratios:", sortino_ratios)

# Normalize the ratios
def normalize(scores):
    values = np.array(list(scores.values()))
    min_val = values.min()
    max_val = values.max()
    return {etf: (score - min_val) / (max_val - min_val + 1e-8) for etf, score in scores.items()}

norm_sharpe = normalize(sharpe_ratios)
norm_sortino = normalize(sortino_ratios)

# Combine
combined_score = {}
for etf in returns.columns:
    combined_score[etf] = 0.5 * norm_sharpe[etf] + 0.5 * norm_sortino[etf]

print("Combined Scores:", combined_score)

total_score = sum(combined_score.values())
weights = {etf: score / total_score for etf, score in combined_score.items()}

print("Portfolio Weights:", weights)

# Function to simulate the portfolio
def simulate_portfolio(weights):
    starting_value = 100000  # Start with $100000
    portfolio = pd.Series(weights) * starting_value
    history = []  # Store portfolio value over time

    for date, daily_ret in returns.iterrows():
        # Apply daily returns to portfolio
        portfolio = portfolio * (1 + daily_ret)
        total_value = portfolio.sum()

        # Rebalance on Jan 1, Apr 1, Jul 1, Oct 1
        if date.month in [1, 4, 7, 10] and date.day == 1:
            portfolio = total_value * pd.Series(weights)

        history.append(total_value)

    return pd.Series(history, index=returns.index)

# Simulate the portfolio
portfolio = simulate_portfolio(weights)

plt.figure(figsize=(10,6))
plt.plot(portfolio, label='value over time' )
plt.title("Blended Portfolio")
plt.xlabel("Date")
plt.ylabel("Portfolio Value")
plt.legend()
plt.show()

# Calculate Sharpe and Max Drawdown for Portfolio
portfolio_returns = portfolio.pct_change().dropna()
sharpe = np.mean(portfolio_returns) / np.std(portfolio_returns) * np.sqrt(252)
max_drawdown = (portfolio / portfolio.cummax() - 1).min()

print(f"Portfolio Sharpe Ratio: {sharpe:.2f}")
print(f"Portfolio Max Drawdown: {max_drawdown:.2%}")